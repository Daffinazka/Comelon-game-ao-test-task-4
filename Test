-- Game for ao

-- Global variable initialization
local flagCaptured = false
local flagLocation = {x = 0, y = 0} -- Coordinates of the red flag
local players = {} -- Table to store player data

-- Credentials and game token
local CRED = "Sa0iBLPNyJQrwpTTG-tWLQU-1QeUAJA73DdxGGiKoJc"
local GAME = "JPSE75vQ-QTAiYBSLTdDfQDUcJYvyVNFzO_cO7Kt9xM"

colors = { red = "\27[31m", green = "\27[32m",reset = "\27[0m",}

-- Initialize maximum number of players
local maxPlayers = 20

-- Initialize arena size
local arenaWidth = 40 -- Width of the arena in units 
local arenaHeight = 40 -- Height of the arena in units

-- Initialize player health
local playerHealth = 100 -- Maximum health points for players

-- Handler to start the game
local function handleStartGame()
    -- Function to start the game
    local function startGame()
        -- Set initial coordinates of the red flag
        flagLocation.x = math.random(arenaWidth)
        flagLocation.y = math.random(arenaHeight)
        
        -- Assign participants as individuals
        for i = 1, maxPlayers do
            local player = {id = "ao.id", x = math.random(arenaWidth), y = math.random(arenaHeight), health = playerHealth}
            table.insert(players, player)
        end
    end
    
    -- Function to transfer cred to start the game
    local function transferCred()
        -- Send command to transfer cred to game
        Send({Target = CRED, Action = "Transfer", Quantity = "10", Recipient = GAME})
    end
    
    -- Check if player has enough cred to start the game
    local function checkPlayerCred()
        -- Assuming the player has enough cred, initiate the transfer and start the game
        transferCred()
        startGame()
        -- Print in green color
        print(colors.green .. "The game has started!" .. colors.reset)
    end

    -- Call function to check player's cred and start the game
    checkPlayerCred()
end

-- Handler to move the player
local function handleMovePlayer(playerID, newX, newY)
    -- Function to move the player
    local function movePlayer(playerID, newX, newY)
        -- Find the player with the matching ID
        for _, player in ipairs(players) do
            if player.id == playerID then
                -- Ensure new coordinates are safe and valid
                if newX >= 0 and newX <= arenaWidth and newY >= 0 and newY <= arenaHeight then
                    player.x = newX
                    player.y = newY
                    -- Deduct health for moving
                    player.health = player.health - 1
                    print("Player " .. playerID .. " moved to (" .. newX .. ", " .. newY .. "). Health: " .. player.health)
                    -- Check if player's health is zero
                    if player.health <= 0 then
                        print(colors.red .. "Player " .. playerID .. " has been captured! Checking health to continue..." .. colors.reset)
                        -- Automatically refill player's health by sending 10 cred
                        Send({Target = CRED, Action = "Transfer", Quantity = "10", Recipient = GAME})
                        player.health = playerHealth -- Restore player's health to maximum
                        print(colors.green .. "Player " .. playerID .. "'s health has been refilled. The game can continue." .. colors.reset)
                    end
                else
                    print("New coordinates are not valid for player " .. playerID)
                end
                break
            end
        end
    end
    
    movePlayer(playerID, newX, newY)
end

-- Handler to capture another player
local function handleCapturePlayer(captorID, capturedID)
    -- Function to capture another player
    local function capturePlayer(captorID, capturedID)
        -- Find the captured player

for _, player in ipairs(players) do
            if player.id == capturedID then
                -- Return the captured player to the starting point
                player.x = math.random(arenaWidth)
                player.y = math.random(arenaHeight)
                -- Set captured player's health to zero
                player.health = 0
                -- Print in red color
                print(colors.red .. "Player " .. captorID .. " captured player " .. capturedID .. ". Health: " .. player.health .. colors.reset)
                break
            end
        end
    end
    
    capturePlayer(captorID, capturedID)
end

-- Handler to run the game overall
local function handleMain()
    -- Main game function
    local function main()
        -- Call the handler to start the game
        handleStartGame()

        -- Main game loop
        while not flagCaptured do
            local alivePlayers = #players -- Count the number of alive players
            if alivePlayers == 0 then
                break -- Exit the loop if there are no more alive players
            end

            -- Each player moves randomly
            for _, player in ipairs(players) do
                if alivePlayers == 1 and not player.hasWon then
                    -- If there's only one player left and they haven't won yet, they win the game
                    player.hasWon = true
                    flagCaptured = true
                    break
                end

                if not player.hasLost then
                    local newX = math.random(arenaWidth)
                    local newY = math.random(arenaHeight)
                    -- Call the handler to move the player
                    handleMovePlayer(player.id, newX, newY)
                    -- Call the handler to check if the flag has been captured
                    handleCheckFlagCaptured()
                    if flagCaptured then
                        break -- Exit the loop if the flag has been captured
                    end
                end
            end
        end

        -- Game over, display victory or defeat message
        print("The game is over!")

        -- Determine the winners and distribute bonus cred
        local winners = {}
        for _, player in ipairs(players) do
            if player.hasWon then
                table.insert(winners, player)
            end
        end

if #winners > 0 then
    -- Calculate bonus cred for each winner
    local totalBonusCred = 0
    -- Calculate total cred in the game
    local totalGameCred = tonumber(CRED)
    for _, player in ipairs(players) do
        if player.bonusCred then
            totalGameCred = totalGameCred + player.bonusCred
        end
    end
    
    for i, winner in ipairs(winners) do
        if i == 1 then
            -- First winner gets 50% of the total cred in the game
            winner.bonusCred = math.floor(totalGameCred * 0.5)
            totalBonusCred = totalBonusCred + winner.bonusCred
        end
    end

    -- Print bonus cred for the first winner
    for _, winner in ipairs(winners) do
        print("Player " .. winner.id .. " has won the game and received " .. winner.bonusCred .. " bonus cred!")
        -- Send bonus cred to winner
        Send({Target = GAME, Action = "Transfer", Quantity = tostring(winner.bonusCred), Recipient = winner.id})
    end
    print("Total bonus cred distributed: " .. totalBonusCred)
else
    print("No winners in this game.")
end

            -- Print bonus cred for each winner
            for _, winner in ipairs(winners) do
                print("Player " .. winner.id .. " has won the game and received " .. winner.bonusCred .. " bonus cred!")
                -- Send bonus cred to winner
                Send({Target = GAME, Action = "Transfer", Quantity = tostring(winner.bonusCred), Recipient = winner.id})
            end
            print("Total bonus cred distributed: " .. totalBonusCred)
        else
            print("No winners in this game.")
        end
    end
    
    main()
end

    -- Find the player with the matching ID
    for i, player in ipairs(players) do
        if player.id == playerID and player.hasWon then
            withdrawAllowed = true
            playerIndex = i
            break
        end
    end


-- Call the handler to run the game overall
handleMain()
