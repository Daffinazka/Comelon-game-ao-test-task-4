- Game for ao

-- Global variable initialization
local flagCaptured = false
local flagLocation = {x = 0, y = 0} 
local players = {} 

-- Credentials and game token
local CRED = "Sa0iBLPNyJQrwpTTG-tWLQU-1QeUAJA73DdxGGiKoJc"
local GAME = " DvvaNtJOzhiIpGqZVjuY_C6C7NPORJsChCVrLNvYC7k"
colors = { red = "\27[31m", green = "\27[32m",reset = "\27[0m",}

-- Initialize maximum number of players
local maxPlayers = 20

Mintiduck:
-- Initialize arena size
local arenaWidth = 40 -- Width of the arena in units 
local arenaHeight = 40 -- Height of the arena in units

-- Initialize player health
local playerHealth = 100 -- Maximum health points for players

-- Handler to start the game
local function handleStartGame()
    -- Function to start the game
    local function startGame()
        -- Set initial coordinates of the red flag
        flagLocation.x = math.random(arenaWidth)
        flagLocation.y = math.random(arenaHeight)
        
        -- Assign participants as individuals
        for i = 1, maxPlayers do
            local player = {id = "ao.id", x = math.random(arenaWidth), y = math.random(arenaHeight), health = playerHealth}
            table.insert(players, player)
        end
    end
    
    -- Function to transfer cred to start the game
    local function transferCred()
        -- Send command to transfer cred to game
        local response = Send({Target = CRED, Action = "Transfer", Quantity = "10", Recipient = GAME})
        if response.status ~= "success" then
            -- Gunakan operator 'or' untuk menggantikan nilai nil dengan 'Unknown error'
            print("Error during credit transfer: " .. (response.error or "Unknown error"))
        else
            print("Credit transfer successful.")
        end
    end
    
    -- Check if player has enough cred to start the game
    local function checkPlayerCred()
        -- Assuming the player has enough cred, initiate the transfer and start the game
        transferCred()
        startGame()
        -- Print in green color
        print(colors.green .. "The game has started!" .. colors.reset)
    end

    -- Call function to check player's cred and start the game
    checkPlayerCred()
end

-- Handler to move the player
local function handleMovePlayer(playerID, newX, newY)
    -- Function to move the player
    local function movePlayer(playerID, newX, newY)
        -- Find the player with the matching ID
        for _, player in ipairs(players) do
            if player.id == playerID then
                -- Ensure new coordinates are safe and valid
                if newX >= 0 and newX <= arenaWidth and newY >= 0 and newY <= arenaHeight then
                    player.x = newX
                    player.y = newY
                    -- Deduct health for moving
                    player.health = player.health - 1
                    print("Player " .. playerID .. " moved to (" .. newX .. ", " .. newY .. "). Health: " .. player.health)
                    -- Check if player's health is zero
                    if player.health <= 0 then
                        print(colors.red .. "Player " .. playerID .. " has been captured! Checking health to continue..." .. colors.reset)
                        -- Automatically refill player's health by sending 10 cred
                        Send({Target = CRED, Action = "Transfer", Quantity = "10", Recipient = GAME})
                        player.health = playerHealth -- Restore player's health to maximum
                        print(colors.green .. "Player " .. playerID .. "'s health has been refilled. The game can continue." .. colors.reset)
                    end
                else
                    print("New coordinates are not valid for player " .. playerID)
                end
                break
            end
        end
    end
    
    movePlayer(playerID, newX, newY)
end

-- Handler to capture another player
local function handleCapturePlayer(captorID, capturedID)
   local function capturePlayer(captorID, capturedID)
        for _, player in ipairs(players) do
            if player.id == capturedID then
                -- Return the captured player to the starting point
                player.x = math.random(arenaWidth)
                player.y = math.random(arenaHeight)
                -- Set captured player's health to zero
                player.health = 0
                -- Print in red color
                print(colors.red .. "Player " .. captorID .. " captured player " .. capturedID .. ". Health: " .. player.health .. colors.reset)
                break
            end
        end
    end
    capturePlayer(captorID, capturedID)
end

-- Fungsi untuk memeriksa apakah bendera telah ditangkap
local function handleCheckFlagCaptured()
    -- Contoh logika sederhana untuk memeriksa penangkapan bendera
    for _, player in ipairs(players) do
        if player.x == flagLocation.x and player.y == flagLocation.y then
            flagCaptured = true
            print(colors.green .. "Bendera telah ditangkap oleh pemain " .. player.id .. colors.reset)
            break
        end
    end
end

-- Handler to run the game overall
local function handleMain()
    -- Function to manage the main game loop
    local function main()
        handleStartGame()
        while not flagCaptured do
            local alivePlayers = #players 
            if alivePlayers == 0 then
                break 
            end

            for _, player in ipairs(players) do
                if alivePlayers == 1 and not player.hasWon then
                    player.hasWon = true
                    flagCaptured = true
                    break
                end

                if not player.hasLost then
                    local newX = math.random(arenaWidth)
                    local newY = math.random(arenaHeight)
                    handleMovePlayer(player.id, newX, newY)
                    handleCheckFlagCaptured()
                    if flagCaptured then
                        break 
                    end
                end
            end
        end

        print("The game is over!")

        local winners = {}
        for _, player in ipairs(players) do
            if player.hasWon then
                table.insert(winners, player)
            end
        end

        if #winners > 0 then
            local totalBonusCred = 0
            local totalGameCred = tonumber(CRED)
            for _, player in ipairs(players) do
                if player.bonusCred then
                    totalGameCred = totalGameCred + player.bonusCred
                end
            end
            
            for i, winner in ipairs(winners) do
                if i == 1 then
                    winner.bonusCred = math.floor(totalGameCred * 0.5)
                    totalBonusCred = totalBonusCred + winner.bonusCred
                end
            end

            for _, winner in ipairs(winners) do
                print("Player " .. winner.id .. " has won the game and received " .. winner.bonusCred .. " bonus cred!")
                Send({Target = GAME, Action = "Transfer", Quantity = tostring(winner.bonusCred), Recipient = winner.id})
            end
            print("Total bonus cred distributed: " .. totalBonusCred)
        else
            print("No winners in this game.")
        end  -- This 'end' closes the if #winners > 0 block
    end  -- This 'end' closes the local function main()
    
    main()
end  -- This 'end' closes the local function handleMain()

handleMain()
